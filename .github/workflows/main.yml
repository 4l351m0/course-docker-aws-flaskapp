name: CI Docker Build and Deploy (CLI SSM FINAL - Estrategia Output)

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mi-app-flask:latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Get Lowercase Docker Hub Username
        id: get_lower_username
        run: |
          # Obtiene el nombre de usuario del secreto y lo convierte a minúsculas
          LOWER_USERNAME=$(echo "${{ secrets.DOCKERHUB_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          # Guarda el resultado como una salida del paso
          echo "::set-output name=lower_username::$LOWER_USERNAME"

      - name: Inject SSH Key & Create Script via SSM CLI
        run: |
          aws ssm send-command \
            --instance-ids '["i-0bc4ea18eca61778df"]' \
            --document-name "AWS-RunShellScript" \
            --comment "Inject SSH key and create script (Using Lowercase Output)" \
            --parameters commands='[
              "cd /home/ubuntu/ || exit 1",
              "mkdir -p .ssh",
              "chmod 700 .ssh",
              "echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLNjxN28wkZDatC3NcwAUwjamliofKjPhOM7avseF+Azrh1wow5MGMncM5vZejlLgPcuXjQef9TERVqBxE5SmFnw3rAQuAVNZERnAdBLXcenROeFCssSDULgHSNxKcqvvqYpxcXcEOAjqIKAk9XjqrAvuJyHLt9QuKmNq/sH4G4yVNGYSTFfH7g2o6or2DWT7U9HpYwMJ0TrzBMISakRIsDWE1fibOI9rYn35EeVxTUGvINldubyGDMxOeNwutEHhcITi1l+NtCmYRUgyHwKiu2gstC+200jNJdi2Bfk6PfnDjL4l8QTZKMvD0tY0fc1C6V/ZmTgGPHTFpAfhzzFQR\" >> .ssh/authorized_keys",
              "chmod 600 .ssh/authorized_keys",
              "chown -R ubuntu:ubuntu /home/ubuntu/.ssh",
              
              # Usamos la salida del paso anterior (nombre de usuario en minúsculas)
              "echo $'\''#!/bin/bash\n\nCONTAINER_NAME=\"my-flask-app-container\"\nIMAGE_NAME=\"${{ steps.get_lower_username.outputs.lower_username }}\/mi-app-flask:latest\"\n\necho \"Deteniendo y eliminando contenedor existente (\\$CONTAINER_NAME)...\"\ndocker stop \\$CONTAINER_NAME > /dev/null 2>&1 || true\ndocker rm \\$CONTAINER_NAME > /dev/null 2>&1 || true\necho \"Contenedor existente detenido/eliminado.\"\n\necho \"Jalando la última imagen de Docker Hub (\\$IMAGE_NAME)...\"\ndocker pull \\$IMAGE_NAME\necho \"Imagen jalada.\"\n\necho \"Ejecutando nuevo contenedor (\\$CONTAINER_NAME)...\"\ndocker run -d --name \\$CONTAINER_NAME -p 80:5000 \\$IMAGE_NAME\necho \"Nuevo contenedor en ejecución.\"\n\necho \"Despliegue completado.\"\n'\'' > deploy.sh",
              
              "chmod +x deploy.sh"
            ]' \
            --region us-east-2

      - name: Run Deploy Script via SSM CLI
        run: |
          aws ssm send-command \
            --instance-ids '["i-0bc4ea18eca61778df"]' \
            --document-name "AWS-RunShellScript" \
            --comment "Run deploy script" \
            --parameters commands='["./deploy.sh"]' \
            --region us-east-2